"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkapp_vue"] = self["webpackChunkapp_vue"] || []).push([["node_modules_capacitor_screen-orientation_dist_esm_web_js"],{

/***/ "./node_modules/@capacitor/screen-orientation/dist/esm/web.js":
/*!********************************************************************!*\
  !*** ./node_modules/@capacitor/screen-orientation/dist/esm/web.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScreenOrientationWeb: function() { return /* binding */ ScreenOrientationWeb; }\n/* harmony export */ });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ \"./node_modules/@capacitor/core/dist/index.js\");\n\nclass ScreenOrientationWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {\n    constructor() {\n        super();\n        if (typeof screen !== 'undefined' &&\n            typeof screen.orientation !== 'undefined') {\n            screen.orientation.addEventListener('change', () => {\n                const type = screen.orientation.type;\n                this.notifyListeners('screenOrientationChange', { type });\n            });\n        }\n    }\n    async orientation() {\n        if (typeof screen === 'undefined' || !screen.orientation) {\n            throw this.unavailable('ScreenOrientation API not available in this browser');\n        }\n        return { type: screen.orientation.type };\n    }\n    async lock(options) {\n        if (typeof screen === 'undefined' ||\n            !screen.orientation ||\n            !screen.orientation.lock) {\n            throw this.unavailable('ScreenOrientation API not available in this browser');\n        }\n        try {\n            await screen.orientation.lock(options.orientation);\n        }\n        catch (_a) {\n            throw this.unavailable('ScreenOrientation API not available in this browser');\n        }\n    }\n    async unlock() {\n        if (typeof screen === 'undefined' ||\n            !screen.orientation ||\n            !screen.orientation.unlock) {\n            throw this.unavailable('ScreenOrientation API not available in this browser');\n        }\n        try {\n            screen.orientation.unlock();\n        }\n        catch (_a) {\n            throw this.unavailable('ScreenOrientation API not available in this browser');\n        }\n    }\n}\n//# sourceMappingURL=web.js.map\n\n//# sourceURL=webpack://app-vue/./node_modules/@capacitor/screen-orientation/dist/esm/web.js?");

/***/ })

}]);